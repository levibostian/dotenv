package lang

import (
	"fmt"
	"regexp"
	"sort"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/levibostian/dotenv/types"
)

type Java struct {
}

var javaFileTemplate = `package %s;

/**
 * This file is automatically generated. Do not modify. 
 */
public final class Env {
    %s
}
`

func (lang Java) GetInfo() LangInfo {
	return LangInfo{
		Name:               "java",
		RequirePackageName: true,
	}
}

func (lang Java) IsFilenameValid(filename string) bool {
	return strings.HasSuffix(filename, ".java")
}

func (lang Java) ParseSourceCodeLine(line string) []string {
	var environmentVariablesFound = []string{}

	// Regex matcher: https://regexr.com/4rf2s
	for _, variableMatch := range regexp.MustCompile("Env\\.[a-z]\\w*").FindAllString(line, -1) {
		// get `fooBar` from `Env.fooBar`
		splitVariableMatch := strings.Split(variableMatch, ".")[1]

		// convert `fooBar` to `FOO_BAR`
		envVarMatch := strcase.ToScreamingSnake(splitVariableMatch)

		environmentVariablesFound = append(environmentVariablesFound, envVarMatch)
	}

	return environmentVariablesFound
}

func (lang Java) GetOutputFileName() string {
	return "Env.java"
}

func (lang Java) GetOutputFile(values map[string]string, options types.GenerateOptions) string {
	var variableLines = []string{}

	// sort the variable names for more predictable tests and make the file easier to read by dev
	keys := make([]string, 0, len(values))
	for k := range values {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	// looping through all environment variables we need to output and generating lines of code for them.
	for _, key := range keys {
		value := values[key]
		variable := key

		// Just making a string variable definition. In Java, you define variables with `public static String <variable-name> = "string value";`
		variableLines = append(variableLines, fmt.Sprintf("public static String %s = \"%s\";", strcase.ToLowerCamel(strings.ToLower(variable)), value))
	}

	// Taking template for language and adding variables to it.
	return fmt.Sprintf(javaFileTemplate, options.PackageName, strings.Join(variableLines, "\n    "))
}
