package lang

import (
	"testing"

	assert "github.com/go-playground/assert/v2"
	"github.com/levibostian/dotenv/types"
)

// IsFilenameValid

func Test_Java_IsFilenameValid_givenFileNoExtension_expectFalse(t *testing.T) {
	given := "Filename"
	actual := Java{}.IsFilenameValid(given)

	assert.Equal(t, actual, false)
}

func Test_Java_IsFilenameValid_givenFileNotJavaExtension_expectFalse(t *testing.T) {
	given := "Filename.xml"
	actual := Java{}.IsFilenameValid(given)

	assert.Equal(t, actual, false)
}

func Test_Java_IsFilenameValid_givenFileJavaExtension_expectTrue(t *testing.T) {
	given := "Filename.java"
	actual := Java{}.IsFilenameValid(given)

	assert.Equal(t, actual, true)
}

func Test_Java_IsFilenameValid_givenEndsWithJava_expectFalse(t *testing.T) {
	given := "Filenamejava"
	actual := Java{}.IsFilenameValid(given)

	assert.Equal(t, actual, false)
}

// ParseSourceCodeLine

func Test_Java_ParseSourceCodeLine_givenLineWithNoVariables_expectEmptyList(t *testing.T) {
	given := "class Foo extends Activity {"
	var expected = []string{}
	actual := Java{}.ParseSourceCodeLine(given)

	assert.Equal(t, actual, expected)
}

func Test_Java_ParseSourceCodeLine_givenLineWithSingleWordVariable_expectGetVariable(t *testing.T) {
	given := "String foo = Env.bar;"
	var expected = []string{"BAR"}
	actual := Java{}.ParseSourceCodeLine(given)

	assert.Equal(t, actual, expected)
}

func Test_Java_ParseSourceCodeLine_givenLineWithDuplicateVariables_expectGetBothVariable(t *testing.T) {
	given := "String foo = Env.bar + Env.bar;"
	var expected = []string{"BAR", "BAR"}
	actual := Java{}.ParseSourceCodeLine(given)

	assert.Equal(t, actual, expected)
}

func Test_Java_ParseSourceCodeLine_givenLineWithMultiWordVariable_expectGetSnakeCase(t *testing.T) {
	given := "String foo = Env.fooBar;"
	var expected = []string{"FOO_BAR"}
	actual := Java{}.ParseSourceCodeLine(given)

	assert.Equal(t, actual, expected)
}

// GetOutputFile

func Test_Java_GetOutputFile_givenNoValues_expectEmptyClassString(t *testing.T) {
	var givenValues = map[string]string{}
	var expected = `package com.foo.bar;

/**
 * This file is automatically generated. Do not modify. 
 */
public final class Env {
    
}
`
	actual := Java{}.GetOutputFile(givenValues, types.GenerateOptions{PackageName: "com.foo.bar"})

	assert.Equal(t, actual, expected)
}

func Test_Java_GetOutputFile_givenValues_expectClassString(t *testing.T) {
	var givenValues = map[string]string{"FOO_BAR": "2", "NAME": "Dana"}
	var expected = `package com.foo.bar;

/**
 * This file is automatically generated. Do not modify. 
 */
public final class Env {
    public static String fooBar = "2";
    public static String name = "Dana";
}
`
	actual := Java{}.GetOutputFile(givenValues, types.GenerateOptions{PackageName: "com.foo.bar"})

	assert.Equal(t, actual, expected)
}
