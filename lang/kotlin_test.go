package lang

import (
	"testing"

	assert "github.com/go-playground/assert/v2"
	"github.com/levibostian/dotenv/types"
)

// IsFilenameValid

func Test_Kotlin_IsFilenameValid_givenFileNoExtension_expectFalse(t *testing.T) {
	given := "Filename"
	actual := Kotlin{}.IsFilenameValid(given)

	assert.Equal(t, actual, false)
}

func Test_Kotlin_IsFilenameValid_givenFileNotKotlinExtension_expectFalse(t *testing.T) {
	given := "Filename.java"
	actual := Kotlin{}.IsFilenameValid(given)

	assert.Equal(t, actual, false)
}

func Test_Kotlin_IsFilenameValid_givenFileKotlinExtension_expectTrue(t *testing.T) {
	given := "Filename.kt"
	actual := Kotlin{}.IsFilenameValid(given)

	assert.Equal(t, actual, true)
}

func Test_Kotlin_IsFilenameValid_givenEndsWithKotlin_expectFalse(t *testing.T) {
	given := "Filenamekt"
	actual := Kotlin{}.IsFilenameValid(given)

	assert.Equal(t, actual, false)
}

// ParseSourceCodeLine

func Test_Kotlin_ParseSourceCodeLine_givenLineWithNoVariables_expectEmptyList(t *testing.T) {
	given := "class Foo: Activity {"
	var expected = []string{}
	actual := Kotlin{}.ParseSourceCodeLine(given)

	assert.Equal(t, actual, expected)
}

func Test_Kotlin_ParseSourceCodeLine_givenLineWithSingleWordVariable_expectGetVariable(t *testing.T) {
	given := "val foo = Env.bar"
	var expected = []string{"BAR"}
	actual := Kotlin{}.ParseSourceCodeLine(given)

	assert.Equal(t, actual, expected)
}

func Test_Kotlin_ParseSourceCodeLine_givenLineWithDuplicateVariables_expectGetBothVariable(t *testing.T) {
	given := "val foo = Env.bar + Env.bar"
	var expected = []string{"BAR", "BAR"}
	actual := Kotlin{}.ParseSourceCodeLine(given)

	assert.Equal(t, actual, expected)
}

func Test_Kotlin_ParseSourceCodeLine_givenLineWithMultiWordVariable_expectGetSnakeCase(t *testing.T) {
	given := "val foo = Env.fooBar"
	var expected = []string{"FOO_BAR"}
	actual := Kotlin{}.ParseSourceCodeLine(given)

	assert.Equal(t, actual, expected)
}

// GetOutputFile

func Test_Kotlin_GetOutputFile_givenNoValues_expectEmptyClassString(t *testing.T) {
	var givenValues = map[string]string{}
	var expected = `package com.foo.bar

/**
 * This file is automatically generated. Do not modify. 
 */
object Env {
    
}
`
	actual := Kotlin{}.GetOutputFile(givenValues, types.GenerateOptions{PackageName: "com.foo.bar"})

	assert.Equal(t, actual, expected)
}

func Test_Kotlin_GetOutputFile_givenValues_expectClassString(t *testing.T) {
	var givenValues = map[string]string{"FOO_BAR": "2", "NAME": "Dana"}
	var expected = `package com.foo.bar

/**
 * This file is automatically generated. Do not modify. 
 */
object Env {
    val fooBar = "2"
    val name = "Dana"
}
`
	actual := Kotlin{}.GetOutputFile(givenValues, types.GenerateOptions{PackageName: "com.foo.bar"})

	assert.Equal(t, actual, expected)
}
